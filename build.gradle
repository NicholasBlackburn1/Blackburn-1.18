buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://maven.minecraftforge.net' }
        maven{
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5+'
        //classpath "org.ajoberstar.grgit:grgit-gradle:5.0.0-rc.3"
    }
}

import net.minecraftforge.forge.tasks.*
//import org.ajoberstar.grgit.Grgit

apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle.patcher'
//apply plugin: "org.ajoberstar.grgit"
println(' Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')' +
        ' Arch: ' + System.getProperty('os.arch'))

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    shade
    compile.extendsFrom shade
}

group = 'space.nickyblackburn'
version = '1.0.10-Optifine'

ext {
    minecraft_version = '1.18.1'
    mcp_version = '20211210.034407'
    mappings_channel = 'official'
    mappings_version = '1.18.1'
    spi_version = '4.0.10'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    
}

sourceSets {
    main {
        java {
            srcDir 'src/libs'
        }
    }
}

dependencies {
    implementation 'net.minecraftforge:forgespi:' + spi_version
    implementation group: "com.github.twitch4j", name: "twitch4j", version: "1.8.0"

	// Logging Implementation
	implementation group: "ch.qos.logback", name: "logback-classic", version: "1.2.10"

    implementation 'club.minnced:java-discord-rpc:2.0.1'

    // YAML Parser
	implementation group: "com.fasterxml.jackson.dataformat", name: "jackson-dataformat-yaml", version: "2.13.0"
  
    shade group: "com.github.twitch4j", name: "twitch4j", version: "1.8.0"

	// Logging Implementation
	shade group: "ch.qos.logback", name: "logback-classic", version: "1.2.10"

    shade 'club.minnced:java-discord-rpc:2.0.1'

    // YAML Parser
	shade group: "com.fasterxml.jackson.dataformat", name: "jackson-dataformat-yaml", version: "2.13.0"



//    Use the shade to add the lib to the jar
//    or use compile if you want to load the lib from the version.json
//    from a maven repo
//    shade 'package-here'
//    compile 'package-here'
}

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.mcp'
    mcp {
        config = minecraft_version + '-' + mcp_version
        pipeline = 'joined'
    }
}

evaluationDependsOn(':mcp')

patcher {
    parent = project(':mcp')
    patchedSrc = file('src/main/java')
    mappings channel: mappings_channel, version: mappings_version
    mcVersion = minecraft_version
}

jar {
    duplicatesStrategy = 'include'

    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            
        manifest {
        if (!configurations.compile.isEmpty()) {
            attributes(
                    'Class-Path': configurations.compile.collect{it.toURI().toString()}.join(' '),
                    'Main-Class': 'net.blackburn.Start')
        }
    }
        sourceSets {
        main {
        resources {
            srcDirs "src/main/resources/assets"
            srcDirs "src/main/resources/data"
        }
    }
    }
     //exclude 'META-INF', 'META-INF/**'
        }
        

    }
}



task runclient(type: JavaExec) {
    group = "MCP"
    description = "Runs the client"
    classpath sourceSets.main.runtimeClasspath
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs '-XstartOnFirstThread'
    }
    args '--gameDir', '.'
    args '--version', minecraft_version
    args '--assetsDir', downloadAssets.output
    args '--assetIndex', "1.18"
    args '--accessToken', '0'
    main 'net.minecraft.client.main.Main'
    workingDir 'run'
}

task setup() {
    group = "MCP"
    description = "Setups the dev workspace"
    dependsOn ':extractMapped'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}

task copyAssets {
    group = "MCP"
    description = "Download and place the assets into the run folder"
    dependsOn ':downloadAssets'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}
